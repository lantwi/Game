$(function() {
  console.log("Loaded, bro.");
  game.start();

  click event, when the player clicks on the cell run the function var cellNum. Not sure on exactly what the function is doing.
  $('.cell').on('click', function() {
    var cellNum = parseInt($(this).attr('id'));
    game.play(cellNum);
    game.render();
    game.checkWin();
  });
});
Creating the constructor,setting the value of the cell equal to zero.
function Cell() {
	this.value = 0;
}
I am not sure why multiplying the value
Cell.prototype.setState = function(value) {
	if (value * value === 1) {
		this.value = value;
	}
};
I don't understand the below function, what does the ? represents
Cell.prototype.playable = function() {
	return (this.value) ? false : true; // ternary operator
};
Returns the value
Cell.prototype.render = function() {
	return this.value;
};

Constructor
function Board() {
  cells set to an empty array
	this.cells = [];
  Not sure why winner and current player is set to null
	this.currentPlayer = null;
	this.winner = null;
	this.winnerFound = false;
}
This function
Board.prototype.startGame = function() {
  (Dont understand the if statement)
	if (this.cells.length) { this.cells = [] };
  runs through the for loop running the Cell function for each cell
	for (var i = 0; i < 9; i++) {
		this.cells.push(new Cell());
	}

	this.currentPlayer = 1;
};

Board.prototype.makePlay = function(position) {
   (Cloudy on this function , when player makes the move checks to see if it playable. If so run setState which will return the value )
	var pieceToPlay = this.cells[position];
	if (pieceToPlay && pieceToPlay.playable()) {
	(is setState a new var or the same var in the cell function)	pieceToPlay.setState(this.currentPlayer);
		this.currentPlayer *= -1;
	}
};
(List out all possible winning scenarios.)
Board.prototype.checkWin = function()
     {
	var row1, row2, row3, col1, col2, col3, diag1, diag2;
	var cellValues = this.cells.map(function(el, idx, cells) {
		return el.render();
	});
	row1 = cellValues[0] + cellValues[1] + cellValues[2];
	row2 = cellValues[3] + cellValues[4] + cellValues[5];
	row3 = cellValues[6] + cellValues[7] + cellValues[8];
	col1 = cellValues[0] + cellValues[3] + cellValues[6];
	col2 = cellValues[1] + cellValues[4] + cellValues[7];
	col3 = cellValues[2] + cellValues[5] + cellValues[8];
	diag1 = cellValues[0] + cellValues[4] + cellValues[8];
	diag2 = cellValues[2] + cellValues[4] + cellValues[6];

	this.checkRows(row1, row2, row3);
	this.checkColumns(col1, col2, col3);
	this.checkDiagonals(diag1, diag2);
	return this.winnerFound;
};
  Checking for a winner in each row
Board.prototype.checkRows = function(row1, row2, row3) {
	if (row1 === 3 || row2 === 3 || row3 === 3) {
		this.winnerFound = true;
		this.winner = 1;
	} else if (row1 === -3 || row2 === -3 || row3 === -3) {
		this.winnerFound = true;
		this.winner = -1;
	}
};
checking for winner in each column
Board.prototype.checkColumns = function(col1, col2, col3) {
	if (col1 === 3 || col2 === 3 || col3 === 3) {
		this.winnerFound = true;
		this.winner = 1;
	} else if (col1 === -3 || col2 === -3 || col3 === -3) {
		this.winnerFound = true;
		this.winner = -1;
	}
};
 checking for winner diagonal
Board.prototype.checkDiagonals = function(diag1, diag2) {
	if (diag1 === 3 || diag2 === 3) {
		this.winnerFound = true;
		this.winner = 1;
	} else if (diag1 === -3 || diag2 === -3) {
		this.winnerFound = true;
		this.winner = -1;
	}
};

Board.prototype.render = function() {
(Setting each player with X & O)
	var pieces = {'1': 'X', '-1': 'O', '0': '_'};
	var gameboard = [
		'Welcome to Tic Tac Toe',
		'----------------------',
    (I dont understand the below)
		'|'+ pieces[this.cells[0].render()] +'|'+ pieces[this.cells[1].render()] +'|'+ pieces[this.cells[2].render()]+'|',
		'|'+ pieces[this.cells[3].render()] +'|'+ pieces[this.cells[4].render()] +'|'+ pieces[this.cells[5].render()]+'|',
		'|'+ pieces[this.cells[6].render()] +'|'+ pieces[this.cells[7].render()] +'|'+ pieces[this.cells[8].render()]+'|',
		'----------------------'
	];
	return gameboard.join('\n');
};

Board.prototype.symbols = function()
  (What is the function of .map)          {
	return this.cells.map(function(cell) {
   ( logging in each player move)
    if (cell.value === 1) {
			return 'X';
		} else if (cell.value === -1) {
			return 'O';
		} else {
			return '';
		}
	});
}
var game = {
	board: '',
	makeBoard: function() {
		this.board = new Board();
	},
	start: function() {
		this.makeBoard();
		this.board.startGame();
	},
	play: function(position) {
		this.board.makePlay(position);
	},
	checkWin: function() {
		var playableCells = this.board.cells.map(function(cell) { return cell.playable(); });
		if (this.board.checkWin()) {
			var winner = this.board.winner === 1 ? 'X' : 'O';
			alert('A winner has been crowned! ' + winner + ' wins!');
			this.start();
		} else if (playableCells.indexOf(true) === -1) {
			alert('No winner! Game Over!');
			this.start();
		}
	},
	render: function() {
		this.board.symbols().forEach(function(sym, idx) {
			var div = $('#' + idx);
			div.text(sym);
		});
	}
};
